#! /usr/bin/python
# Copyright 2019 The Johns Hopkins University Applied Physics Laboratory
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, LoggingEventHandler, FileModifiedEvent
from cwl-to-dag import CwlParser
import parse
import sys
import time
import logging
import re
class CWLFileHandler(LoggingEventHandler):
   def on_any_event(self,event):
        super.on_any_event(event)
        if isinstance(event, FileModifiedEvent):
            path_s = event.src_path.split('/')
            meta_wf_name = path_s[0]
            wf_name = path_s[1]
            job_name = path_s[2]
            if re.match('.*job.*\.yml$', path_s[3]):
                # Job file was modified
            elif re.match('.*\.cwl$', path_s[3]):
                # Workflow file was modified
            

            # Need to rebuild scripts under wf_name
    def job_modified(self,event):
        pass
    def workflow_modified(self, event):
        pass
    def tool_modified(self, event):
        pass
    def params_modified(self, event):
        pass
    


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')
    # path = sys.argv[1] if len(sys.argv) > 1 else '.'
    path = '/saber/'
    # Find workflows
    # Find jobs



    c = CWLFileHandler()
    observer = Observer()
    observer.schedule(c, path, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
